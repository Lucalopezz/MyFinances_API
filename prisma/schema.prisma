generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  password      String
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  wishlistItems WishlistItem[]
  notifications Notification[]
  fixedExpenses FixedExpense[]
}

model Transaction {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  value       Float
  date        DateTime
  category    String
  description String?
  type        TransactionType
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @db.ObjectId
}

enum TransactionType {
  INCOME
  EXPENSE
}

model WishlistItem {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  desiredValue Float
  savedAmount  Float     @default(0)
  targetDate   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.ObjectId
}

enum NotificationType {
  ALERT
  REMINDER
  INFO
}

model FixedExpense {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  amount     Float
  dueDate    DateTime
  isPaid     Boolean        @default(false)
  recurrence RecurrenceType
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @db.ObjectId
}

enum RecurrenceType {
  MONTHLY
  YEARLY
}
